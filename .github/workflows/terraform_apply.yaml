name: Terraform Apply

on:
  workflow_call:
    inputs:
      environment:
        description: 'The environment that was extracted from the comment'
        required: true
        type: string
      operation:
        description: 'The operation that was extracted from the comment'
        required: true
        type: string
      #      varsfile:
      #        description: 'The path to the vars file'
      #        required: true
      #        type: string
      working-directory:
        description: 'The path to the working directory'
        required: false
        default: '.'
        type: string
      repo:
        description: 'The repo that was extracted from the comment'
        required: true
        type: string
      pr_number:
        description: 'The PR number that was extracted from the comment'
        required: true
        type: string
      commit_sha:
        description: 'The commit sha that was extracted from the comment'
        required: true
        type: string
      artifact_name:
        description: 'The name of the artifact'
        required: true
        type: string
jobs:
  terraform_apply:
    if: ${{ inputs.operation == 'apply' }}
    runs-on: ubuntu-latest
    outputs:
      artifact: ${{ steps.setup.outputs.artifact }}
    steps:
      - name: setup
        id: setup
        run: |
          echo "artifact_name=${{ inputs.artifact_name }}" >> $GITHUB_OUTPUT
          echo "artifact=${{ inputs.working-directory }}/${{ inputs.artifact_name }}" >> $GITHUB_OUTPUT

      - name: Fetch PR reviews
        id: fetch_pr_reviews
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pr_reviews=$(gh pr review list -R "${{ inputs.repo }}" -p "${{ inputs.pr_number }}" | jq '.')
          echo "pr_reviews=$pr_reviews" >> $GITHUB_OUTPUT


      - name: Check for code owner approval
        id: check_approval
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pr_reviews="${{ steps.fetch_pr_reviews.outputs.pr_reviews }}"
          code_owner_approval=false
          # Fetch the list of code owners
          code_owners=$(gh api repos/${{ inputs.repo }}/contents/.github/CODEOWNERS | jq -r '.content' | base64 --decode | grep -Eo '@\w+' | tr -d '@')
          
          for row in $(echo "${pr_reviews}" | jq -r '.[] | @base64'); do
            review="$(echo ${row} | base64 --decode)"
            state=$(echo "${review}" | jq -r '.state')
            user_login=$(echo "${review}" | jq -r '.user.login')
          
            if [ "${state}" == "APPROVED" ]; then
              if echo "${code_owners}" | grep -wq "$user_login"; then
                code_owner_approval=true
                break
              fi
            fi
          done
          
          # Check if the user who made the comment is a code owner
          commenter="${{ github.event.comment.user.login }}"
          if echo "${code_owners}" | grep -wq "$commenter"; then
            code_owner_approval=true
          fi
          
          if [ "${code_owner_approval}" == "false" ]; then
            comment_body="error: PR not approved by a code owner. A code owner approval is required to trigger 'terraform apply'."
            comment_payload=$(jq -n --arg body "$comment_body" '{"body": $body}')
            gh api repos/${{ inputs.repo }}/issues/${{ inputs.pr_number }}/comments -H "Content-Type: application/json" -d "$comment_payload"
            exit 1
          fi
          echo "code_owner_approval=$code_owner_approval" >> $GITHUB_OUTPUT


      - name: Validate that the plan has been approved
        id: validate_plan_approval
        run: |
          if [ "${{ inputs.operation }}" == "apply" ]; then
            if [ "${{ steps.check_approval.outputs.code_owner_approval }}" == "false" ]; then
              echo "error: PR not approved by a code owner" >&2
              exit 1
            fi
          fi
        continue-on-error: false

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.OIDC_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.2
          terraform_wrapper: false

      - name: checkout
        uses: actions/checkout@v3
        with:
          ref:  refs/pull/${{ inputs.pr_number }}/head
          repository: ${{ inputs.repo }}

      - name: Download Terraform artifacts
        id: download-artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          search_artifacts: true
          name: ${{ steps.setup.outputs.artifact_name }}

      - name: Add PR comment if Download Terraform artifacts fails
        if: ${{ failure() && steps.download-artifact.outcome == 'failure' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          comment_body="error: Failed to download Terraform artifacts. Please run a **terraform plan** before running **terraform apply**."
          comment_payload=$(jq -n --arg body "$comment_body" '{"body": $body}')
          gh issue comment "${{ inputs.pr_number }}" -r "${{ inputs.repo }}" -b "${comment_body}"
          exit 1
        continue-on-error: false

      - name: Get and Delete Artifacts
        id: get-and-delete-artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          artifact_name="${{ steps.setup.outputs.artifact_name }}"
          artifact_data=$(gh api repos/${{ inputs.repo }}/actions/artifacts)
          artifact_ids=$(echo "$artifact_data" | jq -r ".artifacts[] | select(.name == \"$artifact_name\") | .id")
          
          for artifact_id in $artifact_ids; do
            echo "Deleting artifact with ID: $artifact_id"
            gh api repos/${{ inputs.repo }}/actions/artifacts/$artifact_id -X DELETE
          done
        continue-on-error: false


      - name: install sops
        id: install-sops
        run: |
          wget https://github.com/mozilla/sops/releases/download/v3.7.3/sops_3.7.3_amd64.deb
          sudo dpkg -i sops_3.7.3_amd64.deb
          rm sops_3.7.3_amd64.deb
        continue-on-error: false

      - name: decrypt plan
        run: |
          sops -d -i ${{ steps.setup.outputs.artifact_name }}
        continue-on-error: false

      - name: extract plan
        run: |
          tar xzf ${{ steps.setup.outputs.artifact_name }}
          rm ${{ steps.setup.outputs.artifact_name }}
        continue-on-error: false

      - name: terraform apply
        if: ${{ steps.check_approval.outputs.code_owner_approval == 'true' }}
        id: terraform_apply
        run: |
          terraform init -reconfigure -upgrade
          terraform  ${{ inputs.operation }} -input=false -no-color -auto-approve tfplan  > apply_output.txt
          ls -R
        continue-on-error: false
        working-directory: ${{ inputs.working-directory }}

      - name: Post Terraform apply output as PR comment
        working-directory: ${{ inputs.working-directory }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ls -R
          apply_output=$(cat apply_output.txt)
          max_comment_size=65535
          
          # Split the apply output into smaller chunks
          split_output=$(echo "$apply_output" | awk -v size="$max_comment_size" '{
            printf("%s%s",$0,RT)
            if (length > size) {
              print ""
              $0=$0
            }
          }')
          
          for chunk in "${split_output[@]}"; do
            comment_payload=$(jq -n --arg body "$chunk" '{"body": $body}')
            gh issue comment "${{ inputs.pr_number }}" -R "${{ inputs.repo }}" -b "$chunk"
          done

