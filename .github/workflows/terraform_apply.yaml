name: Terraform Apply

on:
  workflow_call:
    inputs:
      environment:
        description: 'The environment that was extracted from the comment'
        required: true
        type: string
      operation:
        description: 'The operation that was extracted from the comment'
        required: true
        type: string
      #      varsfile:
      #        description: 'The path to the vars file'
      #        required: true
      #        type: string
      working-directory:
        description: 'The path to the working directory'
        required: false
        default: '.'
        type: string
      repo:
        description: 'The repo that was extracted from the comment'
        required: true
        type: string
      pr_number:
        description: 'The PR number that was extracted from the comment'
        required: true
        type: string
      commit_sha:
        description: 'The commit sha that was extracted from the comment'
        required: true
        type: string
      artifact_name:
        description: 'The name of the artifact'
        required: true
        type: string
jobs:
  terraform_apply:
    if: ${{ inputs.operation == 'apply' }}
    runs-on: ubuntu-latest
    outputs:
      artifact: ${{ steps.setup.outputs.artifact }}
    steps:
      - name: setup
        id: setup
        run: |
          echo "artifact_name=${{ inputs.artifact_name }}" >> $GITHUB_OUTPUT
          echo "artifact=${{ inputs.working-directory }}/${{ inputs.artifact_name }}" >> $GITHUB_OUTPUT

      - name: Fetch PR reviews
        id: fetch_pr_reviews
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pr_reviews=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ inputs.repo }}/pulls/${{ inputs.pr_number }}/reviews" | jq '.')

          echo "pr_reviews=$pr_reviews" >> $GITHUB_OUTPUT

      - name: Check for code owner approval
        id: check_approval
        run: |
          pr_reviews="${{ steps.fetch_pr_reviews.outputs.pr_reviews }}"
          code_owner_approval=false
          for row in $(echo "${pr_reviews}" | jq -r '.[] | @base64'); do
            review="$(echo ${row} | base64 --decode)"
            state=$(echo "${review}" | jq -r '.state')
            user_login=$(echo "${review}" | jq -r '.user.login')

            if [ "${state}" == "APPROVED" ]; then
              if curl --silent --header "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ inputs.repo }}/pulls/${{ inputs.pr_number }}/requested_reviewers" | jq -e --arg user_login "$user_login" '.users[] | select(.login == $user_login) | .login' > /dev/null; then
                code_owner_approval=true
                break
              fi
            fi
          done

          if [ "${code_owner_approval}" == "false" ]; then
            echo "error: PR not approved by a code owner" >&2
            exit 1
          fi

      - name: Validate that the plan has been approved
        id: validate_plan_approval
        run: |
          if [ "${{ inputs.operation }}" == "apply" ]; then
            if [ "${{ steps.check_approval.outputs.code_owner_approval }}" == "false" ]; then
              echo "error: PR not approved by a code owner" >&2
              exit 1
            fi
          fi
        continue-on-error: false

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.OIDC_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.2
          terraform_wrapper: false

      - name: checkout
        uses: actions/checkout@v3
        with:
          ref:  refs/pull/${{ inputs.pr_number }}/head
          repository: ${{ inputs.repo }}

      - name: Download Terraform artifacts
        id: download-artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          search_artifacts: true
          name: ${{ steps.setup.outputs.artifact_name }}
        continue-on-error: false

      - name: install sops
        id: install-sops
        run: |
          wget https://github.com/mozilla/sops/releases/download/v3.7.3/sops_3.7.3_amd64.deb
          sudo dpkg -i sops_3.7.3_amd64.deb
          rm sops_3.7.3_amd64.deb
        continue-on-error: false

      - name: decrypt plan
        run: |
          sops -d -i ${{ steps.setup.outputs.artifact_name }}
        continue-on-error: false

      - name: extract plan
        run: |
          tar xzf ${{ steps.setup.outputs.artifact_name }}
          rm ${{ steps.setup.outputs.artifact_name }}
        continue-on-error: false

      - name: terraform apply
        if: ${{ steps.check_approval.outputs.code_owner_approval == 'true' }}
        id: terraform_apply
        run: |
          terraform init -reconfigure -upgrade
          terraform  ${{ inputs.operation }} -input=false -no-color -auto-approve tfplan
        continue-on-error: false
        working-directory: ${{ inputs.working-directory }}
