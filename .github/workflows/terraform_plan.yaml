---
# This workflow is brought to you by Flufi LLC and is licensed under the MIT License. (c) 2023 Flufi LLC.
# All rights reserved.
# Please note that Flufi LLC owns the original version of this workflow,
# which can be found at https://github.com/flufi-io/workflows. Thank you for using our workflows!

name: terraform plan

on:
  workflow_call:
    inputs:
      environment:
        description: 'The environment that was extracted from the comment'
        required: true
        type: string
      operation:
        description: 'The operation that was extracted from the comment'
        required: true
        type: string
      working-directory:
        description: 'The path to the working directory'
        required: false
        default: '.'
        type: string
      repo:
        description: 'The repo that was extracted from the comment'
        required: true
        type: string
      pr_number:
        description: 'The PR number that was extracted from the comment'
        required: true
        type: string
      commit_sha:
        description: 'The commit sha that was extracted from the comment'
        required: true
        type: string
      artifact_name:
        description: 'The name of the artifact'
        required: true
        type: string
      terraform_version:
        required: false
        type: string
        default: ''
      env_vars:
        description: 'Multi-line string of environment variables to pass to the steps'
        required: false
        type: string
        default: ''


jobs:
  terraform_plan:
    if: ${{ inputs.operation == 'plan' }}
    environment: ${{ inputs.environment }}
    env:
      ENV: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    outputs:
      artifact: ${{ steps.setup.outputs.artifact }}
    steps:

      - name: Load secret
        uses: 1password/load-secrets-action@v1
        with:
          export-env: true
        env:
          OP_CONNECT_HOST: ${{ secrets.OP_CONNECT_HOST }}
          OP_CONNECT_TOKEN: ${{ secrets.OP_CONNECT_TOKEN }}
          AWS_ROLE_ARN: op://flufi-${{ inputs.environment }}/github_actions/AWS_ROLE_ARN
          AWS_REGION: op://flufi-${{ inputs.environment }}/github_actions/AWS_REGION
          GITHUB_TOKEN: op://flufi-${{ inputs.environment }}/github_actions/GITHUB_TOKEN
          INFRACOST_API_KEY: op://flufi-${{ inputs.environment }}/github_actions/INFRACOST_API_KEY
          SSH_KEY: op://flufi-${{ inputs.environment }}/github_actions/SSH_KEY

      - name: configure aws credentials
        id: configure-aws-credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: setup
        id: setup
        run: |
          echo "${{ inputs.env_vars }}" | while read -r line
          do
            echo "$line" >> $GITHUB_ENV
          done

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        id: setup-terraform
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false

      - name: checkout
        id: checkout
        uses: actions/checkout@v3
        with:
          ref: refs/pull/${{ inputs.pr_number }}/head
          repository: ${{ inputs.repo }}

      - name: ssh config
        id: ssh_config
        run: |
          mkdir -p ~/.ssh
          echo "Host *" >> ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          echo "  UserKnownHostsFile=/dev/null" >> ~/.ssh/config
          chmod 600 ~/.ssh/config
          eval `ssh-agent -s`
          echo "${{ env.SSH_KEY }}" | base64 -d > ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa
          ssh-add ~/.ssh/id_rsa


      - name: Terraform Init
        id: terraform-init
        working-directory: ${{ inputs.working-directory }}
        continue-on-error: false
        run: |
          terraform init -input=false -no-color -upgrade -reconfigure -backend-config=.backend/${{ inputs.environment }}.tfbackend



      - name: Install 1Password CLI
        uses: 1password/install-cli-action@v1

      - name: Terraform Plan
        id: terraform-plan
        working-directory: ${{ inputs.working-directory }}
        run: |
          op run --env-file secrets.env -- \
            terraform plan -out=tfplan -var-file=fixtures.${{ inputs.environment }}.tfvars  \
            -input=false -no-color
          terraform show -no-color tfplan > plan_output.txt
          terraform show -json tfplan > plan.json
          echo "artifact_path=plan_output.txt" >> $GITHUB_OUTPUT
        continue-on-error: false

      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ env.INFRACOST_API_KEY }}

      - name: Generate Infracost JSON
        run: infracost breakdown --path plan.json --format json --out-file /tmp/infracost.json
        working-directory: ${{ inputs.working-directory }}
        continue-on-error: true

      - name: Post Infracost comment
        run: |
          infracost comment github --path /tmp/infracost.json \
                                   --repo ${{ inputs.repo }} \
                                   --github-token ${{ github.token }} \
                                   --pull-request ${{ inputs.pr_number}} \
                                   --behavior update \
                                   --tag ${{ inputs.environment }}
        continue-on-error: true
        working-directory: ${{ inputs.working-directory }}

      - name: Post Terraform plan output as PR comment
        id: terraform-plan-comment
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
        run: |
          plan_output=$(cat ${{ inputs.working-directory }}/plan_output.txt)
          max_comment_size=65535

          # Split the plan output into smaller chunks
          split_output=$(echo "$plan_output" | awk -v size="$max_comment_size" '{
            printf("%s%s",$0,RT)
            if (length > size) {
              print ""
              $0=$0
            }
          }')

          for chunk in "${split_output[@]}"; do
            gh pr comment ${{ inputs.pr_number }} --body "$chunk"
          done

      - name: Save Terraform state, plan, and encrypt
        id: save-and-encrypt-artifact
        run: |
          tar czf tfplan.tar.gz .terraform tfplan *.tf .terraform.lock.hcl
          wget https://github.com/mozilla/sops/releases/download/v3.8.0/sops_3.8.0_amd64.deb
          sudo dpkg -i sops_3.8.0_amd64.deb
          sops -e -i tfplan.tar.gz
          echo "artifact size=$(du -h tfplan.tar.gz | awk '{print $1}')"
        continue-on-error: false

      - name: Upload Terraform artifacts
        id: upload-artifact
        uses: actions/upload-artifact@v3
        with:
          path: tfplan.tar.gz
          name: ${{ inputs.artifact_name }}
          retention-days: 1
        continue-on-error: false
