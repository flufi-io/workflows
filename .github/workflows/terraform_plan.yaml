---
# This workflow is brought to you by Flufi LLC and is licensed under the MIT License. (c) 2023 Flufi LLC.
# All rights reserved.
# Please note that Flufi LLC owns the original version of this workflow,
# which can be found at https://github.com/flufi-io/workflows. Thank you for using our workflows!

name: terraform plan

on:
  workflow_call:
    inputs:
      environment:
        description: 'The environment that was extracted from the comment'
        required: true
        type: string
      operation:
        description: 'The operation that was extracted from the comment'
        required: true
        type: string
      working-directory:
        description: 'The path to the working directory'
        required: false
        default: '.'
        type: string
      repo:
        description: 'The repo that was extracted from the comment'
        required: true
        type: string
      pr_number:
        description: 'The PR number that was extracted from the comment'
        required: true
        type: string
      commit_sha:
        description: 'The commit sha that was extracted from the comment'
        required: true
        type: string
      artifact_name:
        description: 'The name of the artifact'
        required: true
        type: string
      terraform_version:
        required: false
        type: string
        default: ''
      env_vars:
        description: 'Multi-line string of environment variables to pass to the steps'
        required: false
        type: string
        default: ''


jobs:
  terraform_plan:
    if: ${{ inputs.operation == 'plan' }}
    runs-on: ubuntu-latest
    outputs:
        artifact: ${{ steps.setup.outputs.artifact }}
    steps:
      - name: Add link to workflow run in PR comment
        id: add_link_to_pr_comment
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
          RUN_ID: ${{ github.run_id }}
        run: |
          pr_number="${{ inputs.pr_number }}"
          link="https://github.com/${{ inputs.repo }}/actions/runs/${{ env.RUN_ID }}"
          job_name="${{ github.job }}"
          comment="You can check the current run of the $job_name [here]($link)"
          curl --request POST \
            --url "https://api.github.com/repos/${{ github.repository }}/issues/${pr_number}/comments" \
            --header "authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            --header 'content-type: application/json' \
            --data "{\"body\": \"${comment}\"}"
            - name: Configure 1Password Service Account
        uses: 1password/load-secrets-action/configure@v1
        with:
          # Persist the 1Password Service Account Authorization token
          # for next steps.
          # Keep in mind that every single step in the job is now able
          # to access the token.
          service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: Load  1password credentials
        uses: 1password/load-secrets-action@v1
        with:
          # Export loaded secrets as environment variables
          export-env: true
        env:
          SECRETS: op://flufi-sandbox/cicd/json


      - name: configure aws credentials
        id: configure-aws-credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ fromJson(env.SECRETS).aws.role }}
          aws-region: ${{ fromJson(env.SECRETS).aws.region }}


      - name: setup
        id: setup
        run: |
          echo "artifact_name=${{ inputs.artifact_name }}" >> $GITHUB_OUTPUT
          echo "artifact=${{ inputs.working-directory }}/${{ inputs.artifact_name }}" >> $GITHUB_OUTPUT
          echo "${{ inputs.env_vars }}" | while read -r line
          do
            echo "$line" >> $GITHUB_ENV
          done

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        id: setup-terraform
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false

      - name: checkout
        id: checkout
        uses: actions/checkout@v3
        with:
          ref:  refs/pull/${{ inputs.pr_number }}/head
          repository: ${{ inputs.repo }}

      - name: Terraform Init
        id: terraform-init
        run: terraform init -input=false -no-color -upgrade -reconfigure
        working-directory: ${{ inputs.working-directory }}
        continue-on-error: false

      - name: Terraform Plan
        id: terraform-plan
        working-directory: ${{ inputs.working-directory }}
        run: |
          terraform plan -out=tfplan -var-file=${{ inputs.environment }}.tfvars  -input=false -no-color
          terraform show -no-color tfplan > plan_output.txt
          terraform show -json tfplan > plan.json
        continue-on-error: false

      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ fromJson(env.SECRETS).infracost.api_key }}

      - name: Generate Infracost JSON
        run: infracost breakdown --path plan.json --format json --out-file /tmp/infracost.json
        working-directory: ${{ inputs.working-directory }}
        continue-on-error: true

      - name: Post Infracost comment
        run: |
          infracost comment github --path /tmp/infracost.json \
                                   --repo ${{ inputs.repo }} \
                                   --github-token ${{ github.token }} \
                                   --pull-request ${{ inputs.pr_number}} \
                                   --behavior update \
                                   --tag ${{ inputs.environment }}
        continue-on-error: true
        working-directory: ${{ inputs.working-directory }}

      - name: Post Terraform plan output as PR comment
        id: terraform-plan-comment
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          plan_output=$(cat ${{ inputs.working-directory }}/plan_output.txt)
          max_comment_size=65535

          # Split the plan output into smaller chunks
          split_output=$(echo "$plan_output" | awk -v size="$max_comment_size" '{
            printf("%s%s",$0,RT)
            if (length > size) {
              print ""
              $0=$0
            }
          }')

          for chunk in "${split_output[@]}"; do
            gh pr comment ${{ inputs.pr_number }} --body "$chunk"
          done

      - name: Save Terraform state, plan, and encrypt
        id: save-and-encrypt-artifact
        run: |
          tar czf ${{ steps.setup.outputs.artifact }} ${{ inputs.working-directory }}/.terraform ${{ inputs.working-directory }}/tfplan
          wget https://github.com/mozilla/sops/releases/download/v3.8.0/sops_3.8.0_amd64.deb
          sudo dpkg -i sops_3.8.0_amd64.deb
          sops -e -i ${{ steps.setup.outputs.artifact }}
        continue-on-error: false

      - name: Upload Terraform artifacts
        id: upload-artifact
        uses: actions/upload-artifact@v3
        with:
          path: ${{ steps.setup.outputs.artifact }}
          name: ${{ steps.setup.outputs.artifact_name }}
          retention-days: 1
        continue-on-error: false
