name: terraform command validation
on:
  workflow_call:
    inputs:
      valid_environments:
        description: 'A comma-separated list of valid environments'
        required: true
        type: string
      comment_body:
        description: 'The body of the comment that triggered the workflow'
        required: true
        type: string

    outputs:
      environment:
        description: 'The environment that was extracted from the comment'
        value: ${{ jobs.valid_operation.outputs.environment }}
      operation:
        description: 'The operation that was extracted from the comment'
        value: ${{ jobs.valid_operation.outputs.operation }}
      pr_number:
        description: 'The PR number that was extracted from the comment'
        value: ${{ jobs.valid_operation.outputs.pr_number }}
      repo:
        description: 'The repo that was extracted from the comment'
        value: ${{ jobs.valid_operation.outputs.repo }}
      commit_sha:
        description: 'The commit sha that was extracted from the comment'
        value: ${{ jobs.valid_operation.outputs.commit_sha }}
      artifact_name:
        description: 'The path where the artifact is stored'
        value: plan-${{ jobs.valid_operation.outputs.environment }}-${{ jobs.valid_operation.outputs.commit_sha }}.tar.gz


jobs:
  valid_operation:
    runs-on: ubuntu-latest
    outputs:
      valid: ${{ steps.check_valid_comment.outputs.valid }}
      operation: ${{ steps.set_environment.outputs.operation }}
      environment: ${{ steps.set_environment.outputs.environment }}
      pr_number: ${{ steps.get_pr.outputs.pr_number }}
      repo: ${{ steps.get_pr.outputs.repo }}
      commit_sha: ${{ steps.get_pr.outputs.commit_sha }}
    steps:
      - name: Check if comment is from a Pull Request
        id: check_pr_comment
        run: |
          issue_url="${{ github.event.issue.url }}"
          pr_url=$(gh api "$issue_url" | jq -r '.pull_request.url')
          if [ "$pr_url" != "null" ]; then
            echo "pr_comment=true" >> $GITHUB_OUTPUT
          else
            echo "pr_comment=false" >> $GITHUB_OUTPUT
          fi

      - name: Get associated open pull request
        if: ${{ steps.check_pr_comment.outputs.pr_comment == 'true' }}
        id: get_pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pr_data=$(gh api -X GET "/repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}" \
            | jq 'select(.state == "open") | {number: .number, sha: .head.sha, repo: .head.repo.full_name}')

          pr_number=$(echo "$pr_data" | jq '.number')
          commit_sha=$(echo "$pr_data" | jq '.sha')
          repo=$(echo "$pr_data" | jq -r '.repo')

          echo "pr_number=$pr_number" >> $GITHUB_OUTPUT
          echo "commit_sha=$commit_sha" >> $GITHUB_OUTPUT
          echo "repo=$repo" >> $GITHUB_OUTPUT

      - name: Add link to workflow run in PR comment
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          RUN_ID: ${{ github.run_id }}
        run: |
          pr_number="${{ steps.get_pr.outputs.pr_number }}"
          link="https://github.com/${{ steps.get_pr.outputs.repo }}/actions/runs/${{ env.RUN_ID }}"
#          gh pr comment $pr_number -b "Workflow run: $link"

      - name: Check if valid comment
        if: ${{ steps.check_pr_comment.outputs.pr_comment == 'true' }}
        id: check_valid_comment
        run: |
          comment="${{ inputs.comment_body }}"
          if [[ ! "$comment" =~ ^/ ]]; then
            echo "Invalid comment: comment must start with a slash"
            exit 0
          else
            comment="${comment#"/"}"
          fi
          if [[ "$comment" =~ ^\s ]]; then
            echo "Invalid comment: comment cannot start with whitespace"
            exit 1
          fi
          if [[ "$comment" =~ [^[:alnum:][:space:]\.-]+$ ]]; then
            echo "Invalid comment: comment can only end with alphanumeric characters, whitespace, '.', or '-'"
            exit 1
          fi
          num_words=$(echo "$comment" | wc -w)
          operation=$(echo "$comment" | awk '{print $1 " " $2}')
          environment=$(echo "$comment" | awk '{print $3}')
          if [ $num_words -eq 3 ] && ([ "$operation" == "terraform plan" ] || [ "$operation" == "terraform apply" ]) && (echo "${{ inputs.valid_environments }}" | grep -wq "$environment"); then
            echo "valid=true" >> $GITHUB_OUTPUT
          else
            echo "valid=false" >> $GITHUB_OUTPUT
          fi

      - name: Extract environment and operation from comment
        if: ${{ steps.check_pr_comment.outputs.pr_comment == 'true' }}
        id: set_environment
        run: |
          comment="${{ inputs.comment_body }}"
          export environment=$(echo "$comment" | awk '{print $3}')
          export operation=$(echo "$comment" | awk '{print $2}')

          echo "environment=$environment" >> $GITHUB_OUTPUT
          echo "operation=$operation" >> $GITHUB_OUTPUT
