---
# This workflow is brought to you by Flufi LLC and is licensed under the MIT License. (c) 2024 Flufi LLC.
# All rights reserved.
# Please note that Flufi LLC owns the original version of this workflow,
# which can be found at https://github.com/flufi-io/workflows. Thank you for using our workflows!

name: terratest

on:
  workflow_call:
    inputs:
      ref:
        description: 'Branch or commit to checkout'
        required: true
        type: string
      region:
        description: 'AWS region to use'
        required: false
        type: string
        default: 'us-east-1'
      working-directory:
        description: 'Working directory to run the tests'
        required: false
        type: string
        default: 'examples/complete'

permissions:
  contents: read
  pull-requests: write
  id-token: write  # This is required to use the AWS Credentials

jobs:
  terratest:
    runs-on: ubuntu-latest
    environment: sandbox
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          path: main

      - name: configure aws credentials
        id: configure-aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{vars.account_id}}:role/github-oidc
          aws-region: ${{ inputs.region }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        id: setup-terraform
        with:
          terraform_wrapper: false
          
      - uses: actions/setup-go@v5
        with:
          cache-dependency-path: main/tests/complete/go.mod
          go-version: '>=1.21.0'
      
      - name: decrypt terraform secrets
        working-directory: main/${{ inputs.working-directory }}
        shell: bash
        run: |
          bash secrets.sh -d ${{ inputs.environment }}
        continue-on-error: false
        
      - name: run terratest
        id: terratest
        working-directory: main/tests/complete
        run: |
          export GOOS=linux GOARCH=amd64 CGO_ENABLED=0
          go mod tidy > /dev/null
          go test -v -count=1 -timeout 120m ./...
